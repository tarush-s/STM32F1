#include "stm32f10x.h"
volatile static myTicks=0;

//prototype start
void spi(void);
void ports(void);
void SysTick_Handler(void);
void delayMs(uint16_t ms);
void send(uint8_t data);
void CS_Disable (void);
void CS_Enable (void);
// prototype end

int main()
{

	spi();
	ports();
	


	while(1)
	{

		if(GPIOA -> IDR & 0x00000001) // IDR -> INPUT DATA REGISTER | CHECKING STATUS OF A0
		{
			CS_Enable();
			send((uint8_t) 1);
			CS_Disable();
			delayMs(100);
		}

   
	}


}



void ports(void)
{
	RCC->APB2ENR |=  RCC_APB2ENR_IOPAEN;  // Enable GPIOA clock
	
	//spi ports
	GPIOA->CRL |=(1<<21);
	GPIOA->CRL &=~(1U<<20);
	GPIOA->CRL |=(1<<22) | (1<<23);
	
	GPIOA->CRL |=(1<<29);
	GPIOA->CRL &=~(1U<<28);
	GPIOA->CRL |=(1<<30) | (1U<<31);
	
	
	
	
	
	GPIOA -> CRL &= 0xFFFFFFF0; // RESET PORT A TO 0
	GPIOA -> CRL |= 0x8; // INPUT MODE | PUSH-PULL| PIN A0

}
void spi()
{
	RCC->APB2ENR |= (1<<12);  // Enable SPI1 CLock
	SPI1->CR1|=(3<<3);
	SPI1->CR1 &=~(1<<1);
	SPI1->CR1 &=~(1<<0);
	SPI1->CR1 |=(1<<7);
	SPI1->CR1 &=~(1<<11);
	SPI1->CR1 |= (1<<6) | (1<<2);

 }

void send(uint8_t data)
{
   // Write data to be transmitted to the SPI data register
    SPI1->DR = data;
    // Wait until transmit complete
    while (!(SPI1->SR & ((u16)(0x0002))));
  
}
void SysTick_Handler(void)
{
	myTicks++;
}

void delayMs(uint16_t ms)
{
	myTicks = 0;
	while(myTicks<ms);
}
void CS_Enable (void)
{
	GPIOA->BSRR |= (1<<9)<<16;
}

void CS_Disable (void)
{
	GPIOA->BSRR |= (1<<9);
}
